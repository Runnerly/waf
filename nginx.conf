daemon off;
worker_processes  1;
pid openresty.pid;
error_log /dev/stdout info;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    access_log /dev/stdout;

    lua_shared_dict my_limit_req_store 100m;


    server {
        listen       8888;
        server_name  localhost;

        location / {
            set $max_rate 200;
            set $burst 100;

            access_by_lua_block {
              local limit_req = require "resty.limit.req"
              local lim, err = limit_req.new("my_limit_req_store", 
tonumber(ngx.var.max_rate), tonumber(ngx.var.burst))
              if not lim then
                ngx.log(ngx.ERR,
                        "failed to instantiate a resty.limit.req object: ", err)
                        return ngx.exit(500)
              end
              local key = ngx.var.binary_remote_addr
              local delay, err = lim:incoming(key, true)
              if not delay then
                if err == "rejected" then
                  return ngx.exit(503)
                end
                ngx.log(ngx.ERR, "failed to limit req: ", err)
                return ngx.exit(500)
              end
              if delay >= 0.001 then
                 ngx.sleep(delay)
              end
            }

          proxy_pass http://localhost:5000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       }
    }
}
